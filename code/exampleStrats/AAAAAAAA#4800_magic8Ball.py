import numpy as np
import random
def activate(weights, inputs):
	activation = weights[-1]
	for i in range(len(weights)-1):
		activation += weights[i] * inputs[i]
	return activation
def transfer(activation):
	return 1.0 / (1.0 + np.exp(-activation))
def forward_propagate(network, row):
	inputs = row
	for layer in network:
		new_inputs = []
		for neuron in layer:
			activation = activate(neuron['weights'], inputs)
			neuron['output'] = transfer(activation)
			new_inputs.append(neuron['output'])
		inputs = new_inputs
	return inputs
def predictPresent(network, row):
	outputs = forward_propagate(network, row)
	return outputs.index(max(outputs))

net = [[{'weights': [-1.6093878688145231, 0.1990195635919374, 2.296555103549103, -0.962835234505048, 0.44050483763696485, 3.472454702749179, 2.9440384821229295, 2.8445612762417802, 2.594842645630752, -1.1223742145599604, -0.0982872830421154], 'output': 0.9995217494992951, 'delta': -1.4681027476114932e-09}, {'weights': [1.9766241154186381, 1.1480625356718765, -3.095090412396784, 3.566790392682447, 1.5016801353414624, 0.0654386827982249, 3.6732957331814076, -3.7308978944343956, -2.028644515466221, 0.755763147899167, -1.2301048127431682], 'output': 0.9827052455256156, 'delta': -9.74737363803606e-10}, {'weights': [1.0786441689392376, -0.3061504015906138, 0.6776818658150896, 0.6798797902093786, 0.020604448654367134, 0.7618893247469398, 0.02878254404059247, -0.17247725975988792, 0.4832291656707709, 0.40795721213088754, 0.6924487143523802], 'output': 0.9504475212988029, 'delta': 4.5292583651555806e-10}, {'weights': [-0.28932649412496014, 0.2882478401067099, -1.195496623762568, 0.3846003906591432, 1.600660490867579, 3.4056693072449202, 2.098069570194462, 1.6425387038602324, 1.3146293185576237, 0.36049032284218996, -0.944545632969982], 'output': 0.9930585466838056, 'delta': -7.615993894629358e-10}, {'weights': [2.0881326080260694, 1.7908525116657255, -2.868116592049132, 0.07095825208493492, 1.8774879399554651, 4.277571568375474, 1.2089532993140977, 0.8289950828755157, 0.7217672891773552, -0.38319104283657124, -2.250627639852151], 'output': 0.9978156575349624, 'delta': -4.2980943965333116e-10}, {'weights': [0.7829194591028171, 1.2524187677527756, 0.1474388952392732, -0.8954007546681998, 0.004648925988106471, -0.1968203479377116, 1.3693702986859395, -0.32206211708273674, 0.14997046472294295, 0.8393025823587495, 0.4122601617135446], 'output': 0.9775165592501492, 'delta': 7.866039827662531e-10}, {'weights': [-0.5461824207196235, 0.6566856800355586, 0.3203073849390045, -0.16940263237640316, 0.9111704830164779, 0.6132755605376318, -0.39497173801018576, 0.9382347205999444, 0.3620403053789543, 0.236490189937608, -0.8556943847442923], 'output': 0.6692047725479826, 'delta': 1.7621825294030313e-10}, {'weights': [0.1847898255711901, 0.384049216059238, -1.2762337053108284, 1.5835673411964841, 0.5046553562754501, 1.4206571619803305, 1.910252069612844, -0.22123514458955923, -0.9645638494274146, -0.3508545124701723, -0.5612958050574427], 'output': 0.9286989860739141, 'delta': -2.4845992919359195e-10}, {'weights': [-0.1568689134168308, 0.9944921409787328, 0.1829413990943324, 0.2906914564072817, 0.1699701372278749, 0.44186888022973886, 0.43711027538023894, -0.2868543936705529, 0.3029006254994629, 0.43156238061834196, 0.0547003689933311], 'output': 0.8932344985438483, 'delta': 3.693751171407687e-10}, {'weights': [0.7651931545277842, -1.3528971813048682, 3.1773876177423435, 2.3817951529372676, -1.4989782627127715, 3.0204956853695166, -0.4974839015671708, -0.265471787430324, -0.7336118932082898, -0.11006068198401087, 0.9396249079265786], 'output': 0.9895778183472065, 'delta': 1.272500501934427e-09}, {'weights': [0.76703314534274, -1.8116509042177331, 1.276661501591155, 2.5688446280982236, -2.1337481050217035, 2.4161539038443913, 0.23835893541316686, 0.9584450180734164, 1.1474632180960005, 0.8276228374430421, 0.44978773619121315], 'output': 0.7689863133702648, 'delta': 1.346298459919606e-09}, {'weights': [-0.36999009470164695, 2.6336294413294183, -1.6927945308752197, -1.6275886940294262, 1.8538390305052979, -2.0058080077041134, -0.6871650473180408, 0.9885222670744113, -0.3430409352949199, 0.862038327198487, 0.38369059732352967], 'output': 0.5288183718941926, 'delta': 1.1035542960748484e-09}, {'weights': [1.4408984492362598, -1.3902728536162343, 1.731315387101993, 1.6151349758942497, -1.2559396412264678, 2.1840422082104163, -0.3455596407445834, 0.2866380252734186, 0.590357955210133, 0.3297858758845848, 1.0254103653209474], 'output': 0.9673872092966047, 'delta': 8.45287043959855e-10}, {'weights': [-0.015494900941334272, 1.2510407516421538, 0.6120783342096026, -0.15481422697536693, 0.45198084025686935, -0.0583946473995489, 0.09534161051228719, 0.554986705397533, 0.2998139044960483, 0.607565618114633, -0.8299558166591398], 'output': 0.8185562117128263, 'delta': 2.909964743750628e-10}, {'weights': [1.138556926633264, 0.11936754428188064, 0.8204848105362982, 0.09515061815332554, -0.14063908595635105, 0.36982629714541654, 0.791764194194902, -0.27607816759621095, 0.8713069626660157, 0.8256625831973631, 1.1294618915179846], 'output': 0.9856396881264141, 'delta': 6.855857814844127e-10}, {'weights': [-2.492174997748589, 0.22213935162857706, 7.0169835462354655, 3.722898357516809, 3.656050625612946, -3.8515420201964896, 0.34447426119532515, -0.40760239219582256, 6.743081249820877, -1.5804376361088401, -1.8632870373834427], 'output': 0.9540272642110039, 'delta': -1.4363046230146337e-09}, {'weights': [6.6876373228205255, -2.462579379061716, -3.074640439570742, 5.976349507007451, -0.1371580890239501, 1.3815853215713778, 5.513278973879676, -5.959290372907175, -3.0481717404969886, 0.3978012936650178, -0.552877236635955], 'output': 0.9993611785091161, 'delta': -2.9918511703490497e-09}, {'weights': [-1.2683347676462815, 0.1187752271787765, 1.7557733849751345, -0.4153408826819294, 0.7170083483730006, 2.539442231060569, 2.239623041007771, 2.180449993269922, 2.2580491531675793, -0.7291985298912645, -0.11385144811557141], 'output': 0.9974986894410769, 'delta': -8.013535450281793e-10}, {'weights': [-0.8605491462949854, 0.010684676651869575, 0.6636391462890293, -0.20448863985000484, 0.24657806254855882, 0.25580755473766664, 0.011587503996244706, 1.1339753090995666, 1.0837357693389422, -0.7055644609357806, -1.0620124452827775], 'output': 0.32425957846552056, 'delta': -1.1811550199820174e-10}, {'weights': [1.0823492148407028, -1.0157612093804615, 1.510223014342567, 1.1031094778829047, -0.7187852754124545, 1.226179065641211, 0.7056274114969076, -0.6688684851732033, 0.4664574516589172, 1.1116980167928525, 0.9616727303554568], 'output': 0.9770563911291313, 'delta': 9.031077643121872e-10}], [{'weights': [-3.5811771920292523, -3.4590030475115, 1.7672855044778508, -2.479682631906018, -3.254975359731665, 1.8997094877411984, 0.5451442063915155, -0.833759321272434, 1.138251891453143, 3.900805516010275, 3.790985686137729, 2.9476289701507152, 2.5568451631864395, 0.7543584721238334, 2.5635676165823837, -7.994338468469285, -8.261501905125296, -2.2305536081595894, -0.20126797030218685, 2.8593857572174017, 3.424305611941282], 'output': 0.001430342776152367, 'delta': 7.653011171484693e-10}, {'weights': [3.955879334635359, 3.674708935347267, -0.8615952569168914, 2.3642915048729125, 3.1365284024915723, -2.2988404410453667, -0.5341324614310031, 0.5484009768785507, -0.7639082376028289, -4.166379332850712, -3.471773898141836, -2.920905918578443, -3.0101628858765213, -1.0045782883110748, -2.2031383403202205, 7.839280031512421, 8.277779448521951, 1.8972163620113258, 0.5842816332845902, -2.9245174619084486, -3.805708131015972], 'output': 0.9982962236610851, 'delta': -7.952532633524987e-10}]]

def strategy(history, memory):
    rand = False
    if not rand:
        if history.shape[1] >= 10:
            choice = predictPresent(net, list(history[1][-10:][:9]) + [0])#history[1][-10:])
        else:
            choice = 1
            if history.shape[1] >= 1 and history[1,-1] == 0:
                choice = 0
    else:
        choice = 0
    return choice, None